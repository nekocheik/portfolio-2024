/* --- App.vue --- */
<template>
  <div class="relative">
    <AppHeader />
    <AppMain />
  </div>
</template>

<script setup lang="ts">
import AppHeader from './components/AppHeader.vue'
import AppMain from './components/AppMain.vue'
</script>

/* --- vitestSetup.ts --- */
//global.WebSocket = require('ws')
export {}

/* --- main.ts --- */
import { createApp } from 'vue'
import App from './App.vue'
import router from './router'
import { createThemeManager } from './plugins/themeManager'
import './assets/main.css'
import './assets/style.css'
import Button from './components/Button.vue'
import { library } from '@fortawesome/fontawesome-svg-core'
import { faUserSecret } from '@fortawesome/free-solid-svg-icons'
import { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'

library.add(faUserSecret)

const app = createApp(App)
  .component('font-awesome-icon', FontAwesomeIcon)
  .component('AButton', Button)
  .use(router)
  .use(createThemeManager({ light: 'breeze', dark: 'storm', watchSystemTheme: true }))

app.mount('#app')

/* --- reactives.ts --- */
import { reactive, ref } from 'vue'
import type { DaisyThemes, ThemeOptions } from './index'
const isDark = ref<boolean>(
  window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches
)
const defaults = reactive<ThemeOptions>({
  light: 'light',
  dark: 'dark',
  watchSystemTheme: false
})
const currentTheme = ref<DaisyThemes>('default')
const pluginInitiated = ref<boolean>(false)
export { defaults, currentTheme, pluginInitiated, isDark }

/* --- index.ts --- */
import type { App } from 'vue'
import { defaults, pluginInitiated, currentTheme, isDark } from './reactives'
export const daisyThemes = [
  'default',
  'storm',
  'breeze',
  'light',
  'dark',
  'cupcake',
  'bumblebee',
  'emerald',
  'corporate',
  'synthwave',
  'retro',
  'cyberpunk',
  'valentine',
  'halloween',
  'garden',
  'forest',
  'aqua',
  'lofi',
  'pastel',
  'fantasy',
  'wireframe',
  'black',
  'luxury',
  'dracula',
  'cmyk',
  'autumn',
  'business',
  'acid',
  'lemonade',
  'night',
  'coffee',
  'winter'
] as const
export type DaisyThemes = (typeof daisyThemes)[number]
export type ThemeOptions = {
  light: DaisyThemes
  dark: DaisyThemes
  watchSystemTheme: boolean
}

export const useThemeManager = () => {
  const options: ThemeOptions = {
    light: defaults.light,
    dark: defaults.dark,
    watchSystemTheme: defaults.watchSystemTheme
  }

  if (!pluginInitiated) {
    defaults.light = options?.light as DaisyThemes
    defaults.dark = options?.dark as DaisyThemes
    defaults.watchSystemTheme = options?.watchSystemTheme
    currentTheme.value = isDark.value ? defaults.dark : defaults.light
  }
  // Watch for system preferred theme changes

  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (event) => {
    isDark.value = event.matches
    const theme = event.matches ? (defaults.dark as DaisyThemes) : (defaults.light as DaisyThemes)
    if (defaults.watchSystemTheme === true) setTheme(theme)
  })

  // Set theme
  const setTheme = (theme: DaisyThemes) => {
    let _light = defaults.light as DaisyThemes
    let _dark = defaults.dark as DaisyThemes
    // if default, set theme based on system preferred theme and the default light and dark themes
    let newTheme: DaisyThemes = 'default'
    if (theme === 'default') newTheme = isDark.value ? _dark : _light
    else newTheme = theme

    return document.documentElement.setAttribute('data-theme', (currentTheme.value = newTheme))
  }
  setTheme(currentTheme.value)
  // Get theme
  const getTheme = () => {
    return currentTheme.value
  }
  // Toggle dark mode, using default light and dark themes
  const toggleDark = () => {
    let _light = defaults.light as DaisyThemes
    let _dark = defaults.dark as DaisyThemes
    return document.documentElement.setAttribute(
      'data-theme',
      (currentTheme.value = currentTheme.value === _light ? _dark : _light)
    )
  }
  // Set default light and dark themes
  const setDefaults = (themes: { light?: DaisyThemes; dark?: DaisyThemes }) => {
    defaults.light = themes.light ?? defaults.light
    defaults.dark = themes.dark ?? defaults.dark
    setTheme('default')
  }
  // Get default light and dark themes
  const getDefaults = () => {
    return { light: defaults.light, dark: defaults.dark }
  }
  const isWatchingSystemTheme = (bool?: boolean, updateTheme: boolean = true) => {
    if (bool === undefined) return defaults.watchSystemTheme
    if (bool && updateTheme) setTheme('default')
    return (defaults.watchSystemTheme = bool)
  }

  const themeManagerInstance = {
    set: setTheme,
    get: getTheme,
    toggleDark,
    setDefaults,
    getDefaults,
    watchSystemTheme: isWatchingSystemTheme,
    isDark
  }
  pluginInitiated.value = true
  return { ...themeManagerInstance }
}

export const createThemeManager = (options?: ThemeOptions) => {
  return (app: App) => {
    defaults.light = options?.light as DaisyThemes
    defaults.dark = options?.dark as DaisyThemes
    defaults.watchSystemTheme = options?.watchSystemTheme ?? true
    app.config.globalProperties.$theme = useThemeManager()
  }
}

/* --- CanvasContainer.vue --- */
<template>
  <div ref="canvasContainer" class="canvas-container fixed top-0"></div>
</template>

<script setup lang="ts">
import { ref, onMounted, onBeforeUnmount } from 'vue'
import * as THREE from 'three'

const canvasContainer = ref<HTMLDivElement | null>(null)
const clock = new THREE.Clock()

const initFirstCanvas = () => {
  if (!canvasContainer.value) return

  const container = canvasContainer.value
  const width = container.clientWidth
  const height = container.clientHeight
  const scene = new THREE.Scene()
  const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000)
  const renderer = new THREE.WebGLRenderer({ alpha: true })
  renderer.setSize(width, height)
  renderer.domElement.classList.add('fluctuating-opacity')
  container.appendChild(renderer.domElement)

  const geometry = new THREE.PlaneGeometry(2, 2)
  const material = new THREE.ShaderMaterial({
    vertexShader: `void main() {
      gl_Position = vec4(position, 1.0);
    }`,
    fragmentShader: `
    uniform float time;
    void main() {
      float x = gl_FragCoord.x * 0.005 + time * 2.0;
      float y = gl_FragCoord.y * 0.005;
      float noise = fract(sin(dot(vec2(x, y), vec2(40.4, 788.233))) * 4999999.5453123);
      float gray = smoothstep(0.45, 0.55, noise);
      gl_FragColor = vec4(vec3(gray), 1.0);
    }
    `,
    uniforms: {
      time: { value: 0.0 }
    }
  })

  const mesh = new THREE.Mesh(geometry, material)
  scene.add(mesh)
  camera.position.z = 1

  const animate = () => {
    material.uniforms.time.value = clock.getElapsedTime()
    requestAnimationFrame(animate)
    renderer.render(scene, camera)
  }

  animate()
}

const onWindowResize = () => {
  if (canvasContainer.value) {
    const container = canvasContainer.value
    const width = container.clientWidth
    const height = container.clientHeight
    const canvas = container.querySelector('canvas')
    if (canvas) {
      canvas.style.width = `${width}px`
      canvas.style.height = `${height}px`
    }
  }
}

onMounted(() => {
  initFirstCanvas()
  window.addEventListener('resize', onWindowResize)
})

onBeforeUnmount(() => {
  window.removeEventListener('resize', onWindowResize)
})
</script>

<style>
.canvas-container {
  width: 100vw;
  height: 100vh;
  overflow: hidden;
  top: 0;
  position: absolute;
}

canvas.fluctuating-opacity {
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  animation: fluctuateOpacity2 10s infinite;
}

@keyframes fluctuateOpacity2 {
  0%, 100% {
    opacity: 0.08;
  }
  50% {
    opacity: 0.03;
  }
}
</style>

/* --- PhotoGallery.vue --- */
<template>

</template>
/* --- AppSection.vue --- */
<template>
  <section class="h-[100vh] w-[100vw] absolute top-0">
    <CanvasContainer ref="canvasContainer" />
    <div
      ref="transitionContainer"
      class="w-[100vw] h-[88vh] bg-black absolute left-0 right-0 mx-auto my-auto top-0 bottom-0 flex justify-center items-center overflow-hidden"
      :class="{
        'w-[90vw] left-0 lg:ml-0 rounded-3xl lg:rounded-l-none lg:h-[70vh] transition-all': isMode2,
        '!h-[100vh] !w-[100vw]': isMode3
      }"
    >
      <SecondCanvasContainer ref="secondCanvasContainer" />
    </div>
  </section>
</template>

<script setup lang="ts">
import { ref } from 'vue'
import CanvasContainer from './CanvasContainer.vue'
import SecondCanvasContainer from './SecondCanvasContainer.vue'

const isMode2 = ref(false)
const isMode3 = ref(false)
</script>

/* --- NavigationButton.vue --- */
<template>
  <button
    @click="navigate"
    :class="[
      'text-white font-normal text-lg cursor-pointer',
      { underline: isActive }
    ]"
  >
    {{ label }}
  </button>
</template>

<script setup lang="ts">
import { defineProps, defineEmits } from 'vue'

const props = defineProps({
  label: String,
  routeName: String,
  isActive: Boolean
})

const emits = defineEmits(['navigate'])

const navigate = () => emits('navigate', props.routeName)
</script>

<style scoped>
.underline {
  text-decoration: underline;
}
</style>

/* --- AppHeader.vue --- */
<template>
  <header>
    <nav class="hidden lg:flex fixed top-10 right-20 z-[100] w-96 justify-around">
      <NavigationButton 
        label="home" 
        routeName="home" 
        :isActive="isCurrentRoute('home')" 
        @navigate="navigateTo" 
      />
      <NavigationButton 
        label="Projets" 
        routeName="projets" 
        :isActive="isCurrentRoute('projets')" 
        @navigate="router.push({ name: 'projets', params: { id: 'default' } })" 
      />
      <NavigationButton 
        label="Who I Am" 
        routeName="whoiam" 
        :isActive="isCurrentRoute('whoiam')" 
        @navigate="navigateTo" 
      />
      <NavigationButton 
        label="Contact" 
        routeName="contact" 
        :isActive="isCurrentRoute('contact')" 
        @navigate="navigateTo" 
      />
    </nav>
  </header>
</template>

<script setup lang="ts">
import { computed } from 'vue'
import { useRoute, useRouter } from 'vue-router'
import NavigationButton from './NavigationButton.vue'

const route = useRoute()
const router = useRouter()

const isCurrentRoute = (routeName: string) => route.name === routeName
const navigateTo = (route: string) => router.push({ name: route })
</script>

/* --- HelloWorld.spec.ts --- */
import { mount } from '@vue/test-utils'
import HelloWorld from '../HelloWorld.vue'

describe('HelloWorld', () => {
  it('renders properly', () => {
    const wrapper = mount(HelloWorld, { props: { msg: 'Hello Vitest' } })
    expect(wrapper.text()).toContain('Hello Vitest')
  })
})

/* --- ArrowDown.vue --- */
<template>
  <svg fill="none" height="11" viewBox="0 0 36 11" width="36" xmlns="http://www.w3.org/2000/svg">
    <path
      d="m.831509.654149c-.7463789.366021-.7462318 1.430011.000249 1.795821l16.728142 8.19763c.2776.1361.6026.1361.8802 0l16.7281-8.19763c.7465-.36581.7467-1.4298.0003-1.795822l-.8946-.438713c-.2777-.1361664-.6027-.1362026-.8804-.000098l-14.9534 7.328953c-.2776.13607-.6026.13607-.8802 0l-14.95338-7.328951c-.2777-.136105-.60274-.1360688-.88041.000098z"
      fill="#fff"
    />
  </svg>
</template>

/* --- AppMain.vue --- */
<template>
  <div class="relative">
    <AppHeader />
    <main
      class="relative font-body bg-100-auto w-[99vw] overflow-x-hidden min-h-[100vh]"
      :style="mainStyle"
    >
      <section class="h-[100vh] w-[100vw] absolute top-0">
        <CanvasContainer ref="canvasContainer" />
        <div
          ref="transitionContainer"
          class="transition-all w-[100vw] h-[88vh] bg-black absolute left-0 right-0 mx-auto my-auto top-0 bottom-0 flex justify-center items-center overflow-hidden"
          :class="{
            'w-[90vw] left-0 lg:ml-0 rounded-3xl lg:rounded-l-none lg:h-[70vh]': isMode2,
            '!h-[100vh] !w-[100vw]': isMode3,
            '!hidden': isMode4

          }"
        >
          <SecondCanvasContainer ref="secondCanvasContainer" />
        </div>
      </section>
      <RouterView />
    </main>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, watch, onMounted } from 'vue'
import { useRoute } from 'vue-router'
import { gsap } from 'gsap'
import AppHeader from '@/components/AppHeader.vue'
import CanvasContainer from '@/components/CanvasContainer.vue'
import SecondCanvasContainer from '@/components/SecondCanvasContainer.vue'

const route = useRoute()

const isMode2 = computed(() => route.path === '/projets/default')
const isMode3 = computed(() => route.path === '/projets/one')
const isMode4 = computed(() => route.path === "/who-i-am")

const transitionContainer = ref(null)

const mainStyle = computed(() => ({
  'background-image': isMode2.value || isMode3.value || isMode4.value ? 'url(/background-desktop.jpg)' : ''
}))

// const animateTransition = () => {
//   if (transitionContainer.value) {
//     if (isMode2.value) {
//       gsap.to(transitionContainer.value, { width: '1300px', height: '70vh', duration: 0.5 })
//     } else if (isMode3.value) {
//       gsap.to(transitionContainer.value, { width: '100vw', height: '100vh', duration: 1 })
//     } else {
//       gsap.to(transitionContainer.value, { width: '100vw', height: '88vh', duration: 1.3 })
//     }
//   }
// }

// watch([isMode2, isMode3], animateTransition)

onMounted(() => {
  animateTransition()
})
</script>

<style>
.relative {
  position: relative;
}

.font-body {
  font-family: 'YourFontFamily', sans-serif;
}

.bg-100-auto {
  background-size: 100% auto;
}

.transition-container {
  width: 100vw;
  height: 88vh;
  background-color: black;
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  margin: auto;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
  transition: all 1.5s ease;
}

.transition-container.mode2 {
  width: 90vw;
  height: 70vh;
  border-radius: 3xl;
}

.transition-container.mode3 {
  width: 100vw;
  height: 100vh;
}
</style>

/* --- Button.vue --- */
<template>
	<button class='bg-primary text-white border-2 border-transparent rounded-3xl px-6 py-2 mb-2 hover:bg-primary-light transition-colors'>
		<div class='m-auto'>
			<div class='flex items-center justify-start flex-1 space-x-4'>
				<span class='font-medium'>
					<slot></slot>
				</span>
			</div>
		</div>
	</button>
</template>
/* --- ProjetTemplate.vue --- */
<template>

</template>
/* --- SecondCanvasContainer.vue --- */
<template>
  <div ref="secondCanvasContainer" class="second-canvas-container opacity-20 w-full h-full"></div>
</template>

<script setup lang="ts">
import { ref, onMounted, onBeforeUnmount } from 'vue'
import * as THREE from 'three'

const secondCanvasContainer = ref<HTMLDivElement | null>(null)
const secondClock = new THREE.Clock()
const mouse = new THREE.Vector2()

const initSecondCanvas = () => {
  if (!secondCanvasContainer.value) return

  const container = secondCanvasContainer.value
  const width = container.clientWidth
  const height = container.clientHeight
  const scene = new THREE.Scene()
  const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000)
  const renderer = new THREE.WebGLRenderer({ alpha: true })
  renderer.setSize(width, height)
  renderer.domElement.classList.add('second-canvas')
  container.appendChild(renderer.domElement)

  const geometry = new THREE.PlaneGeometry(2, 2)
  const material = new THREE.ShaderMaterial({
    vertexShader: `void main() {
      gl_Position = vec4(position, 1.0);
    }`,
    fragmentShader: `
    #ifdef GL_ES
    precision mediump float;
    #endif
    
    uniform vec2 u_resolution;
    uniform float u_time;
    uniform vec2 u_mouse;
    
    float random(vec2 st) {
      return fract(sin(dot(st.xy, vec2(0.070,0.140))) * 0.13);
    }
    
    void main() {
      vec2 st = gl_FragCoord.xy / u_resolution.xy;
      vec2 mouse = u_mouse / u_resolution;
      float mouseInfluence = length(mouse - st) * 0.1; // Réduire l'influence de la souris
      float waveSpeed = 0.05 + random(st) * 0.1 + mouseInfluence; // Réduire la vitesse des vagues
      float wave = sin(st.y * 4.648 + u_time * waveSpeed) * 0.5; // Réduire l'amplitude des vagues
      float col = floor((st.x + wave) * 8.264);
      float checker = mod(col, 1.616);
      float distToBlack = min(abs(mod(st.x + wave, 2.608 / 9.040) - 1.0 / 8.520), abs(mod(st.x + wave, 2.672 / 9.600)));
      float shadowIntensity = smoothstep(-0.040, 1.712 / 10.192, distToBlack) * (0.8 + random(st) * 0.4);
      vec3 color = (checker < 1.0) ? vec3(0.0,0.0,0.0) : vec3(0.941,0.995,0.976) * shadowIntensity;
      color += random(st) * 1.490;
      float tintStrength = -0.260;
      vec3 tint = vec3(1.0, 0.5, 0.5);
      color = mix(color, tint, tintStrength);
      gl_FragColor = vec4(color, 0.408);
    }
    `,
    uniforms: {
      u_resolution: { value: new THREE.Vector2(width, height) },
      u_time: { value: 0.0 },
      u_mouse: { value: mouse }
    }
  })

  const mesh = new THREE.Mesh(geometry, material)
  scene.add(mesh)
  camera.position.z = 1

  const animate = () => {
    material.uniforms.u_time.value = secondClock.getElapsedTime()
    material.uniforms.u_mouse.value = mouse
    requestAnimationFrame(animate)
    renderer.render(scene, camera)
  }

  animate()
}

const onWindowResize = () => {
  if (secondCanvasContainer.value) {
    const container = secondCanvasContainer.value
    const width = container.clientWidth
    const height = container.clientHeight
    const canvas = container.querySelector('canvas')
    if (canvas) {
      canvas.style.width = `${width}px`
      canvas.style.height = `${height}px`
    }
    const material = canvas.material
    if (material) {
      material.uniforms.u_resolution.value.set(width, height)
    }
  }
}

const onMouseMove = (event: MouseEvent) => {
  mouse.x = event.clientX
  mouse.y = event.clientY
}

onMounted(() => {
  initSecondCanvas()
  window.addEventListener('resize', onWindowResize)
  window.addEventListener('mousemove', onMouseMove)
})

onBeforeUnmount(() => {
  window.removeEventListener('resize', onWindowResize)
  window.removeEventListener('mousemove', onMouseMove)
})
</script>

<style scoped>
.second-canvas-container {
  overflow: hidden;
  position: absolute;
  background-color: black;
}

canvas.second-canvas {
  display: block;
  width: 100%;
  height: 100%;
}
</style>
/* --- vue.spec.ts --- */
import { test, expect } from '@playwright/test'

// See here how to get started:
// https://playwright.dev/docs/intro
test('visits the app root url', async ({ page }) => {
  await page.goto('/')
  await expect(page.locator('div.greetings > h1')).toHaveText('You did it!')
})

/* --- AboutView.vue --- */
<template>
  <div class="about">
    <div class="container mockup-code max-w-xs">
      <pre data-prefix="$"><code>// This is an about page</code></pre>
    </div>

  </div>
</template>

<style scoped lang="scss">
@media (min-width: 1024px) {
  .about {
    min-height: 100vh;
    display: flex;
    gap: 1rem;
    flex-direction: column;
    justify-content: center;
    align-content: center;
  }
}

.about {
  padding: 5rem;
  display: flex;
  flex-flow: row nowrap;
  justify-content: center;
  gap: 1rem;
  align-items: center;
}
</style>

/* --- Projets.vue --- */
<script setup lang="ts">
import ArrowDown from '@/components/icons/ArrowDown.vue'
import Projet from '@/views/Projet.vue'
import { ref, watch, computed, onMounted, nextTick } from 'vue'
import { useRoute, useRouter } from 'vue-router'

const route = useRoute()
const router = useRouter()

const isMode3 = computed(() => route.path === '/projets/one')

const toggleMode = () => {
  if (isMode3.value) {
    router.replace({
      name: 'projets',
      params: {
        id: 'default'
      }
    })
  } else {
    router.replace({
      name: 'projets',
      params: {
        id: 'one'
      }
    })
  }
}

// Références pour les éléments à animer
const imgRef = ref(null)
const textRef = ref(null)
const containerRef = ref(null)
const arrowRef = ref(null) // Référence pour ArrowDown
const highlightRef = ref(null) // Référence pour l'indicateur highlight

watch(
  () => route.path,
  () => {
    nextTick(() => moveHighlight(currentProjectIndex.value)) // Positionne l'indicateur au changement de route
  }
)

onMounted(() => {
  nextTick(() => moveHighlight(currentProjectIndex.value)) // Positionne l'indicateur au chargement
})

// Fonction de défilement
const scrollDown = () => {
  window.scrollBy({ top: window.innerHeight, behavior: 'smooth' })
}

// Fonction pour déplacer l'indicateur highlight
const moveHighlight = (index) => {
  const highlight = highlightRef.value
  const indicators = document.querySelectorAll('.indicator')
  const target = indicators[index]

  if (highlight && target) {
    const rect = target.getBoundingClientRect()
    const containerRect = target.parentElement.getBoundingClientRect()
    const translateX = rect.left - containerRect.left
    highlight.style.transform = `translateX(${translateX}px)`
  }
}

// Projets mock
const projects = ref([
  {
    id: 'one',
    title: 'The aquaverse',
    role: 'Lead Front',
    link: "https://656bf3d4.frontend-preproduction-29946.pages.dev/",
    description:
      'Lead tech au sein d’une jeune start-up dans le domaine de la cryptomonnaie. À la tête d’une équipe technique de cinq développeurs et d’un chef de projet technique. Ma mission était de définir, maintenir et faire évoluer la partie tech de l’entreprise en définissant les objectifs cours, moyens, long term des différentes briques techniques de notre écosystème.',
    imgSrc: 'https://656bf3d4.frontend-preproduction-29946.pages.dev/assets/background_hader_home_desktop.ac559061.jpg',
    year: 2019,
    technologies: ['Vue.js', 'mongodb', 'Node.js']
  },
  {
    id: 'two',
    title: 'Creating Digital Landscapes',
    link: "https://656bf3d4.frontend-preproduction-29946.pages.dev/",
    role: 'UI/UX Designer',
    description:
      'Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec id elit non mi porta gravida at eget metus...',
    imgSrc: 'https://picsum.photos/600/400?random=2',
    year: 2020,
    technologies: ['Adobe XD', 'Figma', 'Sketch']
  },
  {
    id: 'three',
    title: 'Innovating for the future',
    role: 'Front-end',
    link: "https://656bf3d4.frontend-preproduction-29946.pages.dev/",
    description:
      'Aliquam erat volutpat. Nullam ac diam at lacus euismod fermentum. Etiam pharetra augue non turpis vehicula, nec malesuada...',
    imgSrc: 'https://picsum.photos/600/400?random=3',
    year: 2021,
    technologies: ['React', 'Redux', 'TypeScript']
  },
  {
    id: 'four',
    title: 'AI and Machine Learning',
    role: 'Data Scientist',
    link: "https://656bf3d4.frontend-preproduction-29946.pages.dev/",
    description:
      'Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Cras mattis consectetur purus sit amet fermentum...',
    imgSrc: 'https://picsum.photos/600/400?random=4',
    year: 2022,
    technologies: ['Python', 'TensorFlow', 'Keras']
  },
  {
    id: 'five',
    title: 'Developing Mobile Solutions',
    role: 'Mobile Developer',
    link: "https://656bf3d4.frontend-preproduction-29946.pages.dev/",
    description:
      'Vestibulum id ligula porta felis euismod semper. Donec ullamcorper nulla non metus auctor fringilla...',
    imgSrc: 'https://picsum.photos/600/400?random=5',
    year: 2023,
    technologies: ['Flutter', 'Dart', 'Firebase']
  }
])

const currentProjectIndex = ref(0)
const currentProject = computed(() => projects.value[currentProjectIndex.value])

const changeProject = (index) => {
  currentProjectIndex.value = index
  moveHighlight(index)
}

const openLink = (index) => {
  window.open(projects.value[index].link) 
}
</script>

<template>
  <div class="relative">
    <h1
      class="hidden lg:block z-30 pt-24 pl-24 text-tertiary text-5xl font-thin font-display italic"
    >
      Projets
    </h1>
    <div class="relative h-[70vh] top-[15vh] lg:top-0">
      <div
        @click="() => !isMode3 || toggleMode()"
        ref="containerRef"
        :class="[
          'lg:z-50 bg-white absolute top-0 left-0 right-0 mx-auto my-auto bottom-0 rounded-lg transition-all duration-500 cursor-pointer overflow-hidden',
          isMode3 ? 'w-[80vw] h-[509px]' : 'w-[88vw] h-[60vh] lg:h-96 lg:w-[448px] lg:ml-40'
        ]"
      >
        <div class="relative h-full w-full">
          <img
            ref="imgRef"
            :src="currentProject.imgSrc"
            :class="[
              'h-[100%] object-cover absolute left-0 right-0 mx-auto transition-all duration-500',
              isMode3 ? 'w-[120%]' : 'w-[100%]'
            ]"
            alt=""
          />
          <div
            ref="textRef"
            :class="[
              'text-white text-5xl z-40 font-display uppercase absolute top-0 bottom-0 my-auto flex flex-col justify-center transition-all duration-500',
              isMode3 ? 'translate-x-[40px] scale-[1.1]' : 'translate-x-0 scale-100'
            ]"
          >
            <p class="font-bold">{{ currentProject.title }}</p>
          </div>
          <div
            class="absolute inset-0 bg-black opacity-30 group-hover:opacity-0 transition-opacity duration-300 cursor-pointer"
          ></div>
        </div>
      </div>
      <div
        class="text-white w-[88vw] lg:max-w-[1300px] absolute top-0 right-0 lg:right-auto my-auto bottom-0 flex flex-col items-end pr-14 transition-all duration-500"
        :class="{ 'translate-x-[100vw]': isMode3 }"
      >
        <section class="hidden lg:block absolute top-[-50px] text-5xl font-bold">
          <p>{{ currentProjectIndex + 1 }}</p>
          <p class="pt-4">{{ projects.length }}</p>
        </section>
        <p class="hidden lg:block pt-32"><strong>Role</strong> / {{ currentProject.role }}</p>

        <div class="hidden lg:block w-[400px] text-right pt-20 lg:text-xl">
          <p>
            {{ currentProject.description }}
          </p>
        </div>

        <AButton @click="openLink(currentProjectIndex)" class="mx-auto mt-[60vh] lg:relative lg:mt-20 lg:mr-32">
          En voir plus
        </AButton>
      </div>
    </div>
    <div ref="projetIndicator" v-show="!isMode3" class="lg:pl-10 flex justify-center pt-40 lg:pt-8">
      <div class="relative flex w-60 justify-around">
        <div
          v-for="(project, index) in projects"
          :key="project.id"
          @click="changeProject(index)"
          class="indicator w-5 h-5 bg-primary rounded-md flex items-center cursor-pointer transition-all duration-300"
          :class="{ 'bg-secondary': currentProjectIndex === index }"
        >
          <span
            class="indicator-square w-5/6 h-5/6 block m-auto rounded-sm"
            :class="{ active: currentProjectIndex === index }"
          ></span>
        </div>
        <div ref="highlightRef" class="indicator-highlight absolute bg-white rounded-sm"></div>
      </div>
    </div>
  </div>
  <div v-show="isMode3" @click="scrollDown" class="h-11">
    <div ref="arrowRef" class="hidden lg:flex justify-center pt-8 arrow-down-animation">
      <ArrowDown />
    </div>
  </div>

  <Projet v-if="isMode3" :project="currentProject" />
</template>

<style lang="scss" scoped>
.arrow-down-animation {
  @apply animate-bounce cursor-pointer;
}

.indicator {
  @apply relative transition-transform duration-300;
}

.indicator-square {
  @apply bg-transparent transition-colors duration-300;
}

.indicator-square.active {
  @apply bg-white;
}

.indicator:hover .indicator-square {
  @apply bg-white;
}

.indicator-highlight {
  @apply absolute bg-white rounded-sm transition-transform duration-300;
  width: 24px; /* Ajusté en fonction de la taille de vos indicateurs */
  height: 24px; /* Ajusté en fonction de la taille de vos indicateurs */
  z-index: -1; /* Place derrière les indicateurs */
}
</style>

/* --- Projet.vue --- */
<script setup lang="ts">
import { defineProps } from 'vue'

const props = defineProps({
  project: {
    type: Object,
    required: true
  }
})
</script>

<template>
  <div class="lg:pt-40 h-[300vh] w-[100vw]">
    <section class="text-white pt-50 sm:pt-80 lg:pt-32 px-6 sm:px-28">
      <h1 class="font-kiona text-2xl lg:text-[55px] leading-snug">
        {{ project.title }}
      </h1>
      <div class="pl-2">
        <p class="pt-2"><strong>Réalisé en {{ project.year }}</strong></p>
        <p class="pt-2"><strong>Role</strong> / {{ project.role }}</p>
      </div>

      <div class="pt-16">
        <h2 class="font-kiona text-2xl lg:text-[40px] leading-snug">Mise en context/</h2>
        <p class="w-[90%] lg:w-[800px] pt-4">
          {{ project.description }}
        </p>
      </div>

      <div class="pt-16">
        <h2 class="font-kiona text-2xl lg:text-[40px] leading-snug">
          Techno<br />
          utilisée /
        </h2>
        <ul class="w-[90%] lg:w-[800px] pt-4 pl-6 list-disc">
          <li v-for="tech in project.technologies" :key="tech">{{ tech }}</li>
        </ul>
      </div>

      <div>
        <h2 class="font-kiona text-2xl lg:text-[40px] leading-snug pt-40">Galerie</h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 pt-8">
          <div v-for="n in 6" :key="n" class="relative pb-[75%] overflow-hidden">
            <img
              :src="`https://picsum.photos/600/400?random=${n}`"
              class="absolute top-0 left-0 w-full h-full object-cover"
              alt="gallery image"
            />
          </div>
        </div>
      </div>
    </section>
  </div>
</template>

<style lang="scss" scoped></style>

/* --- Whoiam.vue --- */
<template>
  <div class="text-white mx-4">
    <section>
      <div class="max-w-[500px]">
        <h1 class="pt-28 text-4xl font-kiona">Qui je suis ?</h1>
        <p class="pt-2 text-4xl font-kiona font-normal text-tertiary">Hello !!</p>
        <p class="pt-4">
          Je m’appelle Cheik KONE actuellement en première année de Bachelor Web à Hetic. Je suis
          développeur-FullStack avec de bonnes notions en design.
        </p>
        <p class="pt-10">Passionné par le web et la création de petits jeux indépendants.</p>
      </div>
    </section>

    <div class="">
      <p class="pt-8 text-4xl font-kiona font-medium text-primary">SKILL</p>
      <div class="pt-10 text-2xl">
        <p>- Design</p>
        <ul>
          <li class="pl-4">- UX/UI DESIGN</li>
        </ul>
      </div>
      <div class="pt-10 text-2xl pb-24">
        <p>- Developpement</p>
        <ul>
          <li class="pl-4">- Front-end</li>
          <li class="pl-4">- back-end</li>
        </ul>
      </div>
    </div>
  </div>
</template>

/* --- HomeView.vue --- */
<template>
  <div class="z-50 relative top-20 mx-10 lg:mx-40">
    <div class="font-display text-4xl tracking-[10px]">
      <h1 class="font-bold pt-20 text-xl lg:text-[88px] uppercase italic text text-tertiary">
        welcome !
      </h1>
      <h1 class="font-bold pt-20 text-xl lg:text-[88px] uppercase text text-primary">kone Cheik</h1>

      <h1 class="font-semibold lg:pt-56 lg:text-[60px] uppercase text-xl text-white">
        front-end && Back-end
      </h1>
      <h1
        class="font-[900] text-lg pt-10 lg:text-[60px] uppercase text-white drop-shadow-[37 48.2px 52.2px rgba(0,0,0,0.8)]"
      >
        développeur
      </h1>
      <div class="text-2xl pt-16 lg:pt-32 text-white lg:text-lg">
        <a target="_blank" class="font-bold" href="https://www.linkedin.com/in/cheik-kone/">In</a> /
        <a target="_blank" class="font-bold" href="https://github.com/nekocheik">Git</a>
      </div>
    </div>
    <div class="flex pt-8 lg:pt-16 justify-between w-60">
      <button
        class="text-white font-normal text-lg"
        @click="router.push({ name: 'projets', params: { id: 'default' } })"
      >
        Projets
      </button>
      <button class="text-white font-normal text-lg" @click="navigateTo('whoiam')">Who I Am</button>
      <button class="text-white font-normal text-lg" @click="navigateTo('contact')">Contact</button>
    </div>
  </div>
</template>

<script setup>
import { useRouter } from 'vue-router'

const router = useRouter()

const navigateTo = (route) => {
  router.push({ name: route })
}
</script>

/* --- index.ts --- */
import { createRouter, createWebHashHistory } from 'vue-router'
import Home from "../views/HomeView.vue"

const router = createRouter({
  history: createWebHashHistory(),
  routes: [
    {
      path: '/',
      name: 'home',
      component: Home, 
    },
    {
      path: '/projets/:id',
      component: () => import('../views/Projets.vue'),
      name: 'projets',
    },
    {
      path: '/who-i-am',
      component: () => import('../views/Whoiam.vue'),
      name: 'whoiam',
    },
  ]
})

export default router

